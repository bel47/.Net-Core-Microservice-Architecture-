name: dockercompose9358993901870551065
services:
  apigateway:
    build:
      context: C:\Users\bradmin\source\repos\DemoMicroServicesSolution
      dockerfile: ApiGateway/Dockerfile
    container_name: api-gateway
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    image: apigateway
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      protocol: tcp
    - mode: ingress
      target: 80
      published: "8001"
      protocol: tcp
  customerdb:
    container_name: customer_db
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: P@ssw0rd
    image: mcr.microsoft.com/mssql/server:2019-latest
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 1433
      published: "18001"
      protocol: tcp
  customerwebapi:
    build:
      context: C:\Users\bradmin\source\repos\DemoMicroServicesSolution
      dockerfile: CustomerWebAPI/Dockerfile
    container_name: customer-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: https://+:443;http://+:80
      DB_HOST: customerdb
      DB_Name: dms_customer
      DB_SA_PASSWORD: P@ssw0rd
    image: customerwebapi
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      protocol: tcp
    - mode: ingress
      target: 443
      protocol: tcp
    volumes:
    - type: bind
      source: C:\Users\bradmin\AppData\Roaming/Microsoft/UserSecrets
      target: /root/.microsoft/usersecrets
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: C:\Users\bradmin\AppData\Roaming/ASP.NET/Https
      target: /root/.aspnet/https
      read_only: true
      bind:
        create_host_path: true
  orderdb:
    container_name: order_db
    image: mongo
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 27017
      published: "18005"
      protocol: tcp
  orderwebapi:
    build:
      context: C:\Users\bradmin\source\repos\DemoMicroServicesSolution
      dockerfile: OrderWebApi/Dockerfile
    container_name: order-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DB_HOST: orderdb
      DB_Name: dms_order
    image: orderwebapi
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      protocol: tcp
  productdb:
    container_name: product_db
    environment:
      MYSQL_ROOT_PASSWORD: P@ssw0rd
    image: mysql:8.0.32-oracle
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 3306
      published: "18003"
      protocol: tcp
  productwebapi:
    build:
      context: C:\Users\bradmin\source\repos\DemoMicroServicesSolution
      dockerfile: ProductWebApi/Dockerfile
    container_name: product-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: https://+:443;http://+:80
      DB_HOST: productdb
      DB_Name: dms_product
      DB_PASSWORD: P@ssw0rd
    image: productwebapi
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      protocol: tcp
    - mode: ingress
      target: 443
      protocol: tcp
    volumes:
    - type: bind
      source: C:\Users\bradmin\AppData\Roaming/Microsoft/UserSecrets
      target: /root/.microsoft/usersecrets
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: C:\Users\bradmin\AppData\Roaming/ASP.NET/Https
      target: /root/.aspnet/https
      read_only: true
      bind:
        create_host_path: true
networks:
  backend:
    name: dockercompose9358993901870551065_backend